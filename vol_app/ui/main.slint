import { ScrollView, Button, CheckBox, SpinBox, Slider, GroupBox, LineEdit, StandardListView,
    ComboBox, HorizontalBox, VerticalBox, GridBox, TabWidget, TextEdit } from "std-widgets.slint";

export struct MousePos := {
    x: length,
    y: length,
}

App := Window {
    preferred-width: 1200px;
    preferred-height: 800px;
    title: "Volume demo app";

    property<int> frame_time;

    property<[StandardListViewItem]> parsers_name_list : [{text: "Vol parser"}, {text: "Skull parser"}];
    property<int> parser_picked_index;

    property<[string]> tf_list : ["Skull", "Gray", "White", "Shapes"];
    property<string> tf_current_value: "Skull";

    property<image> render_target;
    callback new_rendered_frame();

    callback render_area_mp(MousePos) -> MousePos;

    // Just declaration, body is in Rust code
    callback render_area_move_event(MousePos);
    callback key_pressed <=> render_key_handler.key-pressed;

    callback x_slider_new_value <=> x_slider.changed; // float
    callback y_slider_new_value <=> y_slider.changed; // float
    callback z_slider_new_value <=> z_slider.changed; // float

    callback render_area_pointer_event <=> render_area.pointer-event;

    callback load_file <=> pick_file_button.clicked;
    callback open_file <=> open_file.clicked;

    callback mt_changed <=> mt_checkbox.toggled;
    property<bool> mt_checked: false;

    callback ert_changed <=> ert_checkbox.toggled;
    property<bool> ert_checked: false;

    callback ei_changed <=> ei_checkbox.toggled;
    property<bool> ei_checked: false;

    callback tf_selected <=> tf_box.selected;

    property<int> render_quality_mode: 1;
    callback render_quality_changed();

    HorizontalLayout {
        padding-left: 15px;
        spacing: 20px;
        TabWidget {
            width: 390px;
            Tab {
                title: "Load";
                VerticalLayout {
                    alignment: start;
                    padding-top: 20px;
                    spacing: 10px;

                    pick_file_button := Button { 
                        text: "Load from a file";
                    }

                    Text { 
                        text: "Choose a parser";
                     }

                    StandardListView {
                        width: parent.width;
                        height: 300px;
                        model <=> root.parsers_name_list;
                        current-item <=> root.parser_picked_index;
                    }

                    VerticalLayout {

                        padding-top: 20px;
                        padding-bottom: 20px;
                        padding-left: 5px;

                        spacing: 10px;
                        
                        mt_checkbox := CheckBox {
                            text: "Multi-threaded rendering";
                            checked <=> root.mt_checked;
                        }

                        ert_checkbox := CheckBox {
                            text: "Early ray termination";
                            checked <=> root.ert_checked;
                        }

                        ei_checkbox := CheckBox {
                            text: "Empty space skipping";
                            checked <=> root.ei_checked;
                        }
                    }

                    open_file := Button { 
                        text: "Open"; // todo disable
                    }
                }
            }
            Tab {
                title: "Controls";
                VerticalBox {
                    alignment: start;
                    GroupBox {
                        title: "x";
                        x_slider := Slider {
                            minimum: -1000;
                            maximum: 1000;
                            value: 0;
                        }
                    }   
                    GroupBox {
                        title: "y";
                        y_slider := Slider {
                            minimum: -1000;
                            maximum: 1000;
                            value: 0;
                        }
                    }  
                    GroupBox {
                        title: "z";
                        z_slider := Slider {
                            minimum: -1000;
                            maximum: 1000;
                            value: 0;
                        }
                    }  
                    VerticalLayout { 
                        padding-top: 20px;
                        spacing: 5px;
                        fast_button := Button {
                            text: "Fast render only";
                            clicked => { 
                                root.render_quality_mode = 0;
                                root.render_quality_changed();
                                border-color = #10ee00;
                                fastmove_button.border-color = #000;
                                quality_button.border-color = #000;
                            }
                        }
                        fastmove_button := Button {
                            text: "Fast render on movement";
                            border-color: #10ee00;
                            clicked => { 
                                root.render_quality_mode = 1; 
                                root.render_quality_changed();
                                border-color = #10ee00;
                                fast_button.border-color = #000;
                                quality_button.border-color = #000;
                            }
                        }
                        quality_button := Button {
                            text: "Quality render only";
                            clicked => { 
                                root.render_quality_mode = 2; 
                                root.render_quality_changed();
                                border-color = #10ee00;
                                fast-button.border-color = #000;
                                fastmove_button.border-color = #000;
                            }
                        }
                    }
                    
                }
            }
            Tab {
                title: "Transfer function";

                VerticalLayout {
                    alignment: start;
                    padding-top: 20px;
                    spacing: 10px;
                    
                    tf_box := ComboBox {
                        width: parent.width;
                        height: 60px;
                        model <=> root.tf_list;
                        current-value <=> root.tf_current_value;
                    }
                }
            }
        }

        VerticalLayout {

            padding: 50px;
            
            RenTar := Image {
                source: root.render_target;
                width: 700px;
                height: 700px;

                image-rendering: pixelated; // No smoothing, image is rendered 1:1

                Rectangle { 
                    x: 0px; // offset to corner of render screen
                    y: 0px;
                    width: 40px;
                    height: 20px;
                    Text { 
                        text: root.frame_time;
                        font-size: 11pt;
                        color: red;
                    }
                }
                
                render_area := TouchArea {
                    width: parent.width;
                    height: parent.height;

                    forward-focus: render_key_handler;

                    render_key_handler := FocusScope {
                    }
                    
                    moved => {
                        root.render_area_move_event({ x: self.mouse-x, y: self.mouse-y})
                    }
                }
            }
        }
    }
}